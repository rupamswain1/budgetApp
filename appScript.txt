function doGet(e) {
  const action = e.parameter.action;
  const month = e.parameter.month;
  const year = e.parameter.year;
  const user = e.parameter.user;

  if (!validateUser(user)) {
    return ContentService.createTextOutput(JSON.stringify({ error: "Invalid user" }))
      .setMimeType(ContentService.MimeType.JSON)
  }

  if (action === "getBudget") {
    return getBudget(month, year);
  } else if (action === "getExpenses") {
    return getExpenses(month, year);
  }
  else if (action === "validateUser") {
    return ContentService.createTextOutput(JSON.stringify({ message: "success" }))
      .setMimeType(ContentService.MimeType.JSON)
  }
  else {
    return ContentService.createTextOutput(JSON.stringify({ error: "Invalid action" }))
      .setMimeType(ContentService.MimeType.JSON)
  }
}

function doPost(e) {
  const action = e.parameter.action;
  const user = e.parameter.user;
  const data = JSON.parse(e.postData.contents);

  if (!validateUser(user)) {
    return ContentService.createTextOutput(JSON.stringify({ error: "Invalid user" }))
      .setMimeType(ContentService.MimeType.JSON)
  }

  if (action === "addBudget") {
    return addBudget(data, user);
  } else if (action === "addExpense") {
    return addExpense(data, user);
  } else {
    return ContentService.createTextOutput(JSON.stringify({ error: "Invalid action" }))
      .setMimeType(ContentService.MimeType.JSON)
  }
}

// Validate if the user exists in the Users sheet
function validateUser(user) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Users");
  if (!sheet) return false;

  const lastRow = sheet.getLastRow();
  if (lastRow <= 1) {
    // No data beyond the header row
    return false;
  }

  const users = sheet.getRange(2, 1, lastRow - 1).getValues().flat();
  return users.includes(user);
}
function formatDate(date) {
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed
  const day = String(date.getDate()).padStart(2, '0');

  return `${year}-${month}-${day}`;
}
// Fetch budget by month and year

function getBudget(month, year) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Budget");
  const lastRow = sheet.getLastRow();
  let processedData = {}

  if (lastRow <= 1) {
    // No data beyond the header row
  }
  else {
    const data = sheet.getRange(2, 1, lastRow - 1, sheet.getLastColumn()).getValues();
    const filtered = data.filter(row => {
      const date = new Date(row[0]);
      return date.getMonth() + 1 === parseInt(month) && date.getFullYear() === parseInt(year);
    });
    if (filtered.length) {
      processedData.date = formatDate(filtered[0][0]);
      processedData.amount = filtered[0][1];
      processedData.createdBy = filtered[0][2];
      processedData.createdOn = formatDate(filtered[0][3]);
    }
  }

  return ContentService.createTextOutput(JSON.stringify({ budget: processedData }))
    .setMimeType(ContentService.MimeType.JSON)
}

// Fetch expenses by month and year
function getExpenses(month, year) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Expenses");
  const lastRow = sheet.getLastRow();
  let processedData = [];
  let totalExpenseAmount = 0;
  if (lastRow <= 1) {
    // No data beyond the header row
  }
  else {
    const data = sheet.getRange(2, 1, sheet.getLastRow() - 1, sheet.getLastColumn()).getValues();
    const filtered = data.filter(row => {
      const date = new Date(row[0]);
      return date.getMonth() + 1 === parseInt(month) && date.getFullYear() === parseInt(year);
    });
    if(filtered.length){
      processedData = filtered.map((data)=>{
        totalExpenseAmount = totalExpenseAmount+data[2]
        return {
          date:formatDate(data[0]),
          itemName:data[1],
          price:data[2],
          paidBy:data[3],
          createdBy:data[4],
          createdOn:data[5]
        }
      })
    }
  }

  return ContentService.createTextOutput(JSON.stringify({ expenses: processedData, totalExpenseAmount }))
    .setMimeType(ContentService.MimeType.JSON)
}

// Add a new budget
function addBudget(data, user) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Budget");
  sheet.appendRow([data.date, data.budget, user, new Date()]);
  return ContentService.createTextOutput(JSON.stringify({ success: true }))
    .setMimeType(ContentService.MimeType.JSON)
}

// Add a new expense
function addExpense(data, user) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Expenses");
  sheet.appendRow([data.date, data.item, data.price, data.paidBy, user, new Date()]);
  return ContentService.createTextOutput(JSON.stringify({ success: true }))
    .setMimeType(ContentService.MimeType.JSON)
}
